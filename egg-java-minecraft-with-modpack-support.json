{
    "_comment": "DO NOT EDIT: FILE GENERATED AUTOMATICALLY BY PTERODACTYL PANEL - PTERODACTYL.IO",
    "meta": {
        "version": "PTDL_v2",
        "update_url": null
    },
    "exported_at": "2025-10-19T03:07:16+02:00",
    "name": "Minecraft: MCJars + Modpack Support",
    "author": "info@emeraldhost.de",
    "description": "Minecraft is a game about placing blocks and going on adventures. Explore randomly generated worlds and build amazing things from the simplest of homes to the grandest of castles. Play in Creative Mode with unlimited resources or mine deep in Survival Mode, crafting weapons and armor to fend off dangerous mobs. Do all this alone or with friends.",
    "features": [
        "eula",
        "java_version",
        "pid_limit"
    ],
    "docker_images": {
        "Java 25": "ghcr.io\/mcjars\/pterodactyl-yolks:java_25",
        "Java 24": "ghcr.io\/mcjars\/pterodactyl-yolks:java_24",
        "Java 23": "ghcr.io\/mcjars\/pterodactyl-yolks:java_23",
        "Java 22": "ghcr.io\/mcjars\/pterodactyl-yolks:java_22",
        "Java 21": "ghcr.io\/mcjars\/pterodactyl-yolks:java_21",
        "Java 19": "ghcr.io\/mcjars\/pterodactyl-yolks:java_19",
        "Java 18": "ghcr.io\/mcjars\/pterodactyl-yolks:java_18",
        "Java 17": "ghcr.io\/mcjars\/pterodactyl-yolks:java_17",
        "Java 16": "ghcr.io\/mcjars\/pterodactyl-yolks:java_16",
        "Java 11": "ghcr.io\/mcjars\/pterodactyl-yolks:java_11",
        "Java 8": "ghcr.io\/mcjars\/pterodactyl-yolks:java_8"
    },
    "file_denylist": [],
    "startup": "java -Dterminal.jline=false -Dterminal.ansi=true -Xms256M -Xmx$(({{SERVER_MEMORY}}*{{MAXIMUM_RAM}}\/100))M -jar {{SERVER_JARFILE}} nogui",
    "config": {
        "files": "{}",
        "startup": "{\r\n    \"done\": [\r\n        \")! For help, type \",\r\n        \"Listening on \/\",\r\n        \"Server started on\",\r\n        \"Limbo server listening on\",\r\n        \")! Run \/geyser help\",\r\n        \"Done (\",\r\n        \"Server started on\"\r\n    ]\r\n}",
        "logs": "{}",
        "stop": "^C"
    },
    "scripts": {
        "installation": {
            "script": "#!\/bin\/bash\r\n# MCJars API Installation Script with CurseForge & Modrinth Support\r\n#\r\n# Server Files: \/mnt\/server\r\n# Image to install with is 'ghcr.io\/pterodactyl\/installers:debian'\r\n#\r\n# Variables:\r\n# MCJARS_API_KEY - Optional: MCJars API key for authenticated requests (increases rate limits)\r\n# SOFTWARE - The software to install (e.g., \"paper\", \"spigot\", \"fabric\", \"neoforge\") - Required\r\n# VERSION - The version of the software to install (default: \"latest\")\r\n# BUILD - The specific build of the software to install (default: \"latest\")\r\n# CURSEFORGE_API_KEY - Optional: CurseForge API key for automatic mod downloading (increases rate limits)\r\n# MODRINTH_API_KEY - Optional: Modrinth API key for authenticated requests (increases rate limits)\r\n# MODPACK_SOURCE - The modpack source (\"curseforge\" or \"modrinth\", empty for vanilla MCJars)\r\n# DOWNLOAD_URL - URL to modpack ZIP or custom files\r\n# MAX_PARALLEL - Number of parallel downloads for modpack mods (default: 5)\r\n#\r\n# Examples:\r\n# MCJars only: SOFTWARE=paper, VERSION=latest, BUILD=latest\r\n# NeoForge + CurseForge modpack: SOFTWARE=neoforge, MODPACK_SOURCE=curseforge, DOWNLOAD_URL=https:\/\/...modpack.zip\r\n# NeoForge + Modrinth modpack: SOFTWARE=neoforge, MODPACK_SOURCE=modrinth, DOWNLOAD_URL=https:\/\/...modpack.zip\r\n\r\n# Ensure the target directory exists and change to it\r\nmkdir -p \/mnt\/server\r\ncd \/mnt\/server || exit 1\r\n\r\n# Install required packages silently\r\napt-get update > \/dev\/null 2>&1\r\napt-get install -y curl jq atool wget unzip dos2unix > \/dev\/null 2>&1\r\n\r\n# Set default values\r\nMCJARS_API_KEY=${MCJARS_API_KEY:-}\r\nVERSION=${VERSION:-latest}\r\nBUILD=${BUILD:-latest}\r\nCURSEFORGE_API_KEY=${CURSEFORGE_API_KEY:-}\r\nMODRINTH_API_KEY=${MODRINTH_API_KEY:-}\r\nMODPACK_SOURCE=${MODPACK_SOURCE:-}\r\nDOWNLOAD_URL=${DOWNLOAD_URL:-}\r\nMAX_PARALLEL=${MAX_PARALLEL:-5}\r\n\r\n#========================\r\n# CurseForge API Configuration\r\n#========================\r\n\r\nCURSEFORGE_API_URL=\"https:\/\/api.curseforge.com\/v1\/mods\/\"\r\n\r\n#========================\r\n# Utility Functions\r\n#========================\r\n\r\nfunction log_section() {\r\n    echo \"=== $1 ===\"\r\n}\r\n\r\nfunction log_info() {\r\n    echo -e \"\\t$1\"\r\n}\r\n\r\nfunction setup_server_basics() {\r\n    log_section \"Setting up server basics\"\r\n\r\n    # Create\/update server.properties\r\n    if [ ! -f server.properties ]; then\r\n        echo 'motd=\u00a7dA Minecraft Server' >> server.properties\r\n    fi\r\n}\r\n\r\n#========================\r\n# MCJars Installation\r\n#========================\r\n\r\nfunction mcjars_install() {\r\n    log_section \"Installing Base Server\"\r\n    \r\n    local CURL_HEADERS=()\r\n    if [[ -n \"$MCJARS_API_KEY\" ]]; then\r\n        CURL_HEADERS=(\"-H\" \"Authorization: $MCJARS_API_KEY\")\r\n    fi\r\n    \r\n    # Fetch the latest release version if VERSION is set to \"latest\"\r\n    if [ \"$VERSION\" == \"latest\" ]; then\r\n        VERSION=$(curl -s \"${CURL_HEADERS[@]}\" \"https:\/\/versions.mcjars.app\/api\/v2\/builds\/$SOFTWARE\" | jq -r '.builds | to_entries | map(select(.value.type == \"RELEASE\")) | last | .key')\r\n    fi\r\n    \r\n    # Fetch the latest build ID for the selected version if BUILD is set to \"latest\"\r\n    if [ \"$BUILD\" == \"latest\" ]; then\r\n        BUILD=$(curl -s \"${CURL_HEADERS[@]}\" \"https:\/\/versions.mcjars.app\/api\/v1\/builds\/$SOFTWARE\/$VERSION\/latest\" | jq -r '.build.id')\r\n    fi\r\n    \r\n    log_info \"Software: $SOFTWARE\"\r\n    log_info \"Version: $VERSION\"\r\n    log_info \"Build: $BUILD\"\r\n    \r\n    # Download and execute the MCJars installation script for the selected build\r\n    bash <(curl -s \"${CURL_HEADERS[@]}\" \"https:\/\/versions.mcjars.app\/api\/v1\/script\/$BUILD\/bash\")\r\n}\r\n\r\n#========================\r\n# Modpack Installation (CurseForge\/Modrinth)\r\n#========================\r\n\r\nfunction download_modpack() {\r\n    log_section \"Downloading modpack\"\r\n    \r\n    if [[ -z \"$DOWNLOAD_URL\" ]]; then\r\n        echo \"ERROR: DOWNLOAD_URL is required for modpack installation!\"\r\n        exit 1\r\n    fi\r\n    \r\n    log_info \"Downloading from: $DOWNLOAD_URL\"\r\n    if ! wget -q \"$DOWNLOAD_URL\" -O modpack.zip; then\r\n        echo \"ERROR: Modpack download failed!\"\r\n        exit 1\r\n    fi\r\n    \r\n    log_info \"Unpacking modpack...\"\r\n    unzip -o modpack.zip > \/dev\/null 2>&1\r\n    rm modpack.zip\r\n}\r\n\r\nfunction install_curseforge_mods() {\r\n    log_section \"Installing mods\"\r\n    \r\n    if [[ ! -f \"manifest.json\" ]]; then\r\n        return\r\n    fi\r\n    \r\n    log_info \"Found CurseForge manifest.json\"\r\n    \r\n    # Check if it's a downloadable manifest (with projectID\/fileID)\r\n    if ! jq -e '.files[0].projectID' manifest.json > \/dev\/null 2>&1; then\r\n        log_info \"Mods are already included in the modpack archive. Skipping downloads.\"\r\n        return\r\n    fi\r\n    \r\n    if [[ -z \"$CURSEFORGE_API_KEY\" ]]; then\r\n        log_info \"CURSEFORGE_API_KEY not provided. Skipping automatic mod downloads.\"\r\n        return\r\n    fi\r\n    \r\n    log_info \"Downloading mods with CurseForge API...\"\r\n    \r\n    mkdir -p mods\r\n    local mod_count=0\r\n    \r\n    local CURL_HEADERS=(\"--header=Accept: application\/json\" \"--header=x-api-key: ${CURSEFORGE_API_KEY}\")\r\n    \r\n    jq -c '.files[]? | select(.required == true) | {project: .projectID, file: .fileID}' manifest.json 2>\/dev\/null | while read -r mod; do\r\n        local MOD_PROJECT_ID=$(echo \"$mod\" | jq -r '.project \/\/ empty')\r\n        local MOD_FILE_ID=$(echo \"$mod\" | jq -r '.file \/\/ empty')\r\n        \r\n        if [[ -n \"$MOD_PROJECT_ID\" && -n \"$MOD_FILE_ID\" ]]; then\r\n            local FILE_URL=$(wget -q \"${CURL_HEADERS[@]}\" \"${CURSEFORGE_API_URL}${MOD_PROJECT_ID}\/files\/${MOD_FILE_ID}\/download-url\" -O - | jq -r '.data \/\/ empty')\r\n            \r\n            if [[ -n \"$FILE_URL\" ]]; then\r\n                log_info \"Downloading mod: $MOD_PROJECT_ID\/$MOD_FILE_ID\" &\r\n                wget -q \"$FILE_URL\" -P mods &\r\n                \r\n                ((mod_count++))\r\n                if (( mod_count >= MAX_PARALLEL )); then\r\n                    wait -n\r\n                    ((mod_count--))\r\n                fi\r\n            fi\r\n        fi\r\n    done\r\n    wait\r\n}\r\n\r\nfunction install_modrinth_mods() {\r\n    log_section \"Installing mods\"\r\n    \r\n    if [[ ! -f \"modrinth.index.json\" ]]; then\r\n        return\r\n    fi\r\n    \r\n    log_info \"Found modrinth.index.json, downloading mods...\"\r\n    \r\n    mkdir -p mods\r\n    local mod_count=0\r\n    \r\n    local CURL_HEADERS=()\r\n    if [[ -n \"$MODRINTH_API_KEY\" ]]; then\r\n        CURL_HEADERS=(\"-H\" \"Authorization: Bearer $MODRINTH_API_KEY\")\r\n    fi\r\n    \r\n    jq -c '.files[]? | select(.env.server == \"required\") | {url: .downloads[0]}' modrinth.index.json 2>\/dev\/null | while read -r mod; do\r\n        local FILE_URL=$(echo \"$mod\" | jq -r '.url \/\/ empty')\r\n        \r\n        if [[ -n \"$FILE_URL\" ]]; then\r\n            log_info \"Downloading mod: $FILE_URL\" &\r\n            wget -q \"${CURL_HEADERS[@]}\" \"$FILE_URL\" -P mods &\r\n            \r\n            ((mod_count++))\r\n            if (( mod_count >= MAX_PARALLEL )); then\r\n                wait -n\r\n                ((mod_count--))\r\n            fi\r\n        fi\r\n    done\r\n    wait\r\n}\r\n\r\nfunction copy_overrides() {\r\n    log_section \"Copying overrides\"\r\n    \r\n    # CurseForge overrides\r\n    if [[ -d \"overrides\" ]]; then\r\n        log_info \"Copying overrides...\"\r\n        cp -r overrides\/* . 2>\/dev\/null\r\n        rm -rf overrides\r\n    fi\r\n    \r\n    # Modrinth overrides (shared and server-specific)\r\n    if [[ -d \"server-overrides\" ]]; then\r\n        log_info \"Copying server-overrides...\"\r\n        chmod -R 755 server-overrides\/* 2>\/dev\/null\r\n        cp -r server-overrides\/* . 2>\/dev\/null\r\n        rm -rf server-overrides\r\n    fi\r\n}\r\n\r\n#========================\r\n# Main Logic\r\n#========================\r\n\r\n# Validate SOFTWARE parameter\r\nif [[ -z \"$SOFTWARE\" ]]; then\r\n    echo \"ERROR: SOFTWARE parameter is required!\"\r\n    exit 1\r\nfi\r\n\r\nINSTALLATION_START=$(date +%s)\r\n\r\n# Step 1: Always install the base server first (MCJars)\r\nmcjars_install\r\n\r\n# Step 2: If modpack is specified, install it after MCJars\r\nif [[ -n \"$MODPACK_SOURCE\" && \"$MODPACK_SOURCE\" != \"\" ]]; then\r\n    echo \"\"\r\n    log_section \"Installing Modpack\"\r\n    \r\n    download_modpack\r\n    \r\n    if [[ \"$MODPACK_SOURCE\" == \"curseforge\" ]]; then\r\n        install_curseforge_mods\r\n    elif [[ \"$MODPACK_SOURCE\" == \"modrinth\" ]]; then\r\n        install_modrinth_mods\r\n    else\r\n        echo \"ERROR: Invalid MODPACK_SOURCE value! Use 'curseforge' or 'modrinth'\"\r\n        exit 1\r\n    fi\r\n    \r\n    copy_overrides\r\n    setup_server_basics\r\n    \r\n    echo \"Modpack installation completed successfully!\"\r\nelse\r\n    setup_server_basics\r\nfi\r\n\r\necho \"\"\r\nlog_section \"Installation Complete\"\r\nINSTALLATION_END=$(date +%s)\r\nINSTALLATION_TIME=$((INSTALLATION_END - INSTALLATION_START))\r\necho \"Total installation time: ${INSTALLATION_TIME}s\"\r\necho \"Enjoy your server!\"",
            "container": "ghcr.io\/parkervcp\/installers:debian",
            "entrypoint": "bash"
        }
    },
    "variables": [
        {
            "name": "Server Jar File",
            "description": "The name of the server jarfile to run the server with.",
            "env_variable": "SERVER_JARFILE",
            "default_value": "server.jar",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|regex:\/^([\\w\\d._-]+)(\\.jar)$\/",
            "field_type": "text"
        },
        {
            "name": "Additional Flags",
            "description": "This allows switching to additional flags like Aikar's Flags, recommended for usage on all bukkit-based Softwares (for example Paper, Purpur, ...)",
            "env_variable": "ADDITIONAL_FLAGS",
            "default_value": "None",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string|in:None,Aikar's Flags,Velocity Flags",
            "field_type": "text"
        },
        {
            "name": "Maximum Ram Percentage",
            "description": "Decide how much of your servers ram to allocate for minecraft usage, on heavy modpacks you should keep this a bit lower than usual.",
            "env_variable": "MAXIMUM_RAM",
            "default_value": "90",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|int|min:50|max:100",
            "field_type": "text"
        },
        {
          "name": "Minehut Support",
          "description": "Enable Minehut Support by adding all requires flags to forward player data.",
          "env_variable": "MINEHUT_SUPPORT",
          "default_value": "None",
          "user_viewable": true,
          "user_editable": true,
          "rules": "required|string|in:None,Velocity,Waterfall,Bukkit",
          "field_type": "text"
        },
        {
          "name": "Log Prefix (Admin Only)",
          "description": "",
          "env_variable": "LOG_PREFIX",
          "default_value": "\\033[1m\\033[33mcontainer@pterodactyl~\\033[0m",
          "user_viewable": false,
          "user_editable": false,
          "rules": "required|string",
          "field_type": "text"
        },
        {
            "name": "Java Agent",
            "description": "ADVANCED FEATURE: Set a custom java agent to use, useful for SWM or similar.",
            "env_variable": "JAVA_AGENT",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string|regex:\/^([\\w\\d._-]+)(\\.jar)$\/",
            "field_type": "text"
        },
        {
            "name": "Override Startup",
            "description": "ADVANCED FEATURE: Override the displayed startup command to support all other variables, contact support to change.",
            "env_variable": "OVERRIDE_STARTUP",
            "default_value": "1",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|boolean",
            "field_type": "text"
        },
        {
            "name": "Automatic Updating",
            "description": "ADVANCED FEATURE: Automatically update your server software to the latest build available for the running version. This does not require using the Version Changer to install it. Do not use on modded servers.",
            "env_variable": "AUTOMATIC_UPDATING",
            "default_value": "0",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|boolean",
            "field_type": "text"
        },
        {
            "name": "SIMD Operations Support",
            "description": "Add Support for SIMD Operations by adding --add-modules=jdk.incubator.vector, used in forks like Pufferfish or Purpur for improved map rendering performance. (Java 16-21)",
            "env_variable": "SIMD_OPERATIONS",
            "default_value": "0",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|boolean",
            "field_type": "text"
        },
        {
            "name": "Remove Update Warning",
            "description": "Removes the 20 second spigot update warning by adding -DIReallyKnowWhatIAmDoingISwear to the startup flags",
            "env_variable": "REMOVE_UPDATE_WARNING",
            "default_value": "0",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|boolean",
            "field_type": "text"
        },
        {
          "name": "Malware Scan",
          "description": "Toggle running a Malware Scan on Server Startup using https:\/\/github.com\/OpticFusion1\/MCAntiMalware.",
          "env_variable": "MALWARE_SCAN",
          "default_value": "0",
          "user_viewable": true,
          "user_editable": true,
          "rules": "required|boolean",
          "field_type": "text"
        },
        {
            "name": "Software",
            "description": "The Software thats installed when the server gets reinstalled, mainly for use with billing panels, not users. (check https:\/\/versions.mcjars.app\/#model\/types) for all types!",
            "env_variable": "SOFTWARE",
            "default_value": "PAPER",
            "user_viewable": true,
            "user_editable": true,
            "rules": "required|string|max:20|uppercase",
            "field_type": "text"
        },
        {
            "name": "Build ID",
            "description": "The specific build ID (e.g. 185) that will be installed when the server is reinstalled. If not specified, the latest available build version will be used.",
            "env_variable": "BUILD",
            "default_value": "latest",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
            "name": "Version",
            "description": "The Minecraft version (e.g. 1.20.1) that should be installed when the server is reinstalled. If not specified, the latest stable version will be installed.",
            "env_variable": "VERSION",
            "default_value": "latest",
            "user_viewable": true,
            "user_editable": true,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
          "name": "MCJars API Key",
          "description": "Optional: MCJars API key for authenticated requests (increases rate limits)",
          "env_variable": "MCJARS_API_KEY",
          "default_value": "",
          "user_viewable": false,
          "user_editable": false,
          "rules": "nullable|string",
          "field_type": "text"
        },
        {
            "name": "CurseForge API Key",
            "description": "Optional: CurseForge API key for automatic mod downloading (increases rate limits)",
            "env_variable": "CURSEFORGE_API_KEY",
            "default_value": "",
            "user_viewable": false,
            "user_editable": false,
            "rules": "nullable|string",
            "field_type": "text"
        },
        {
          "name": "Modrinth API Key",
          "description": "Optional: Modrinth API key for authenticated requests (increases rate limits)",
          "env_variable": "MODRINTH_API_KEY",
          "default_value": "",
          "user_viewable": false,
          "user_editable": false,
          "rules": "nullable|string",
          "field_type": "text"
        },
        {
          "name": "Modpack source",
          "description": "E.g.: curseforge, modrinth",
          "env_variable": "MODPACK_SOURCE",
          "default_value": "",
          "user_viewable": true,
          "user_editable": true,
          "rules": "nullable|string",
          "field_type": "text"
        },
        {
          "name": "Download file",
          "description": "Optional: URL to a file you want to download and extract",
          "env_variable": "DOWNLOAD_URL",
          "default_value": "",
          "user_viewable": true,
          "user_editable": true,
          "rules": "nullable|string",
          "field_type": "text"
        }
    ]
}